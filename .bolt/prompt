1. TypeScript & Code Style

- Prefer type aliases over interface (except for extending external types).
- Replace enum with as const objects or string/number literal union types.
- Enable strict: true & noUncheckedIndexedAccess: true in tsconfig.json. Avoid any.
- File & directory names: kebab-case (e.g., expense-card.tsx).
- Component names: PascalCase (e.g., CardExpenseSummary).
- Variables & functions: camelCase.
- Use pure functions and React Hooks; avoid ES6 classes for components/logic.
- Use template literals for string conversion: `Hello ${name}`.

2. Folder & File Structure

- Shared utilities: utils/
- Global hooks: hooks/
- UI kit (frozen): components/ui/ — do not modify anything here.
- Feature-specific code: co-locate; use a folder for 3+ related files; re-export via index.ts.

3. Technology Stack (MVP)

- Mobile: Expo SDK (latest stable), React Native (aligned with Expo)
- Language: TypeScript
- API: tRPC
- State/Queries: TanStack Query v5
- Validation: Zod
- Database: PostgreSQL (Neon) via Drizzle ORM
- Forms: React Hook Form + Zod resolver
- Auth: Clerk
- Files: UploadThing
- Dates: date-fns
- AI: Vercel AI SDK; model IDs via env vars
- Styling: nativewind (treat exactly like Tailwind)
- Component Library: react-native-reusables (treat exactly like shadcn)
- Navigation: React Navigation
- Images: expo-image
- Lists: @shopify/flash-list
- Animations: react-native-reanimated
- Local Storage: MMKV
- Avoid: React Server Components, Server Actions, and React.Suspense for data fetching in this MVP

4. Development Workflow

- Package manager: npm
- Node: Version in .nvmrc (≥20). Use nvm use.
- Expo: Start with npm run dev
- Environment variables:
  • Use .env files (.env in .gitignore) for local dev.
  • Define a Zod schema (e.g., in env.ts) for validation (T3.env style).
  • Import validated vars via import { env } from '@/env';
  • EAS Build secrets auto-exposed and validated by this schema.
- Git: Conventional Commits; squash-merge PRs.
- Language: English in code, comments, commits.
- Scripts:
  • npm run lint → ESLint + Prettier check.
  • npm run typecheck → tsc --noEmit.
- Builds/Updates: EAS Build, EAS Submit, EAS Update.

5. Styling & Tailwind (nativewind)

- Use nativewind utility classes everywhere—no theme tokens or custom style objects.
- nativewind is fully Tailwind-compatible. If you see Tailwind docs, apply the same patterns.
- Available color classes (light + dark support via dark: prefix). Do not invent any others:

  bg-background, text-foreground  
  bg-card, text-card-foreground  
  bg-popover, text-popover-foreground  
  bg-primary, text-primary-foreground  
  bg-secondary, text-secondary-foreground  
  bg-muted, text-muted-foreground  
  bg-accent, text-accent-foreground  
  bg-destructive, text-destructive-foreground  
  border-border, bg-input, ring-ring

  bg-chart-1 … bg-chart-5  
  bg-income, bg-expense, bg-transfer, bg-savings  
  bg-account-payment, bg-account-savings, bg-account-debt

- Responsive, spacing, typography, and border utilities: use standard Tailwind class names (e.g. p-4, text-base, rounded-md).
- For dark mode, prefix with dark:.

6. React Patterns (React 19+)

- Avoid useMemo, useCallback, and React.memo by default. Trust the React compiler. Use only if profiling shows a clear need.
- Component definition:
  export function MyComponent(props: MyProps) { … }
- Co-locate styles via nativewind classes in JSX. Do not use StyleSheet.create for anything theme-dependent.

7. Accessibility (a11y)

- Interactive elements: use TouchableOpacity, Button, etc., with clear affordances.
- Provide accessibilityLabel for icon-only or ambiguous controls.
- Ensure text contrast via the available color classes (WCAG AA).
- Touch targets ≈44×44dp.

8. Performance Essentials

- Use @shopify/flash-list for virtualized lists. Provide estimatedItemSize and a stable keyExtractor.
- Use expo-image for images with placeholder props. Optimize at source if possible.
- Use react-native-reanimated for UI-thread animations.
- Defer heavy work via InteractionManager.runAfterInteractions.
- Profile with React DevTools if needed.

9. Error Handling & Logging

- Wrap major UI sections in an ErrorBoundary component.
- Use try…catch around await calls.
- Handle TanStack Query and tRPC errors (isError, error, onError). Show user-friendly messages.
- console.error in dev for unexpected errors.
- Integrate Sentry or Bugsnag in production; avoid logging PII.

10. State Management

- Server state: TanStack Query v5.
- Global UI state: React Context for simple use-cases. If it grows, consider Zustand.
- Local state: useState or useReducer.
- Forms: React Hook Form + Zod resolver.
- Follow single-source-of-truth and immutability.

11. AI-Generated Change Verification

- After AI edits:
  • Run npm run lint → fix errors.
  • Run npm run typecheck → fix errors.
  • Confirm logic matches requirements and conventions.

All code, docs, and structure must follow these rules. When in doubt, prefer clarity, consistency, and maintainability.
